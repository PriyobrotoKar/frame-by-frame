// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AuthProvider {
  DISCORD
  GOOGLE
}

enum AttachmentType {
  PDF
  ZIP
}

enum VideoStatus {
  NOT_STARTED
  PENDING
  PROCESSING
  READY
  FAILED
}

model User {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique
  profilePic String?
  role       Role    @default(USER)

  discordId String? @unique
  googleId  String? @unique

  authProvider AuthProvider

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String  @id @default(cuid())
  title       String
  description String?
  image       String?
  slug        String  @unique

  chapters Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id    String @id @default(cuid())
  title String
  slug  String @unique
  order Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  documents Document[]
  videos    Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id      String  @id @default(cuid())
  title   String
  content String?
  order   Int
  slug    String  @unique

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?
  url         String?
  order       Int
  status      VideoStatus @default(NOT_STARTED)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id   String         @id @default(cuid())
  name String
  url  String
  type AttachmentType
  size Int

  documentId String
  document   Document @relation(fields: [documentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
